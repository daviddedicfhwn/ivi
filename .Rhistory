##1966-2016
US_Winners_1966_2016 <- US_Wahlen_1920_2016%>%
filter(Wahljahr >=1966)
View(US_Winners_1966_2016)
##1966-2016
US_Winners_1966_2016 <- US_Wahlen_1920_2016%>%
filter(Wahljahr >=1966) %>%
group_by(Siegerpartei) %>%
Summarise(AnzahlSiege = n())
##1966-2016
US_Winners_1966_2016 <- US_Wahlen_1920_2016%>%
filter(Wahljahr >=1966) %>%
group_by(Siegerpartei) %>%
summarise(AnzahlSiege = n())
View(US_Winners_1966_2016)
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(AnzahlPerioden = n())
View(US_Praesidenten_4Jplus)
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(AnzahlPerioden = n(),
Partei = Siegerpartei) %>%
select(AnzahlPerioden >1) %>%
arrange(desc(AnzahlPerioden))
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(AnzahlPerioden = n(),
Partei = Siegerpartei) %>%
select(AnzahlPerioden >1) %>%
arrange(desc(AnzahlPerioden))
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(AnzahlPerioden = n()) %>%
select(AnzahlPerioden >1) %>%
arrange(desc(AnzahlPerioden))
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(AnzahlPerioden = n()) %>%
select(AnzahlPerioden >1)
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n()) %>%
select(AnzahlPerioden >1)
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n()) %>%
select(Perioden >1)
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n())
View(US_Praesidenten_4Jplus)
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n(),
Partei = Siegerpartei)
US_Praesidenten_4Jplus <- US_Praesidenten_4Jplus %>%
select(Perioden >1)%>%
arrange(desc(Perioden))
US_Praesidenten_4Jplus <- US_Praesidenten_4Jplus %>%
select(Perioden >1)
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n(),
Partei = Siegerpartei) %>%
filter(Perioden >1)%>%
arrange(desc(Perioden))
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n(),
Partei = Siegerpartei)
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
select(Wahlsieger,Siegerpartei)
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
select(Wahlsieger,Siegerpartei) %>%
group_by(Wahlsieger)
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
select(Wahlsieger,Siegerpartei) %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n(),
Partei = mean(Siegerpartei))
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
select(Wahlsieger,Siegerpartei) %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n(),
Partei = Siegerpartei)
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
select(Wahlsieger,Siegerpartei) %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n())
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
select(Wahlsieger) %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n())
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n()) %>%
arrange(desc(Perioden)) %>%
left_join(US_Wahlen_1920_2016, by = "Wahlsieger")%>%
Select(Wahlsieger,Perioden,Siegerpartei)
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n()) %>%
arrange(desc(Perioden)) %>%
left_join(US_Wahlen_1920_2016, by = "Wahlsieger")%>%
select(Wahlsieger,Perioden,Siegerpartei)
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n()) %>%
arrange(desc(Perioden))
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n(),
Partei = Siegerpartei) %>%
arrange(desc(Perioden))
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n(),
Partei = Siegerpartei) %>%
group_by(Wahlsieger)%>%
arrange(desc(Perioden))
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n(),
Partei = Siegerpartei) %>%
ungroup()
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n()) %>%
ungroup()
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n()) %>%
ungroup() %>%
filter(Perioden >1) %>%
arrange(desc(Perioden))
first_last <- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger)%>%
summarise(Erste = min(Wahljahr),
Letzte= max(Wahljahr))
View(first_last)
US_Praesidenten_4Jplus <- left_join(US_Praesidenten_4Jplus,first_last, by = "Wahlsieger")
US_Praesidenten_4Jplus <- left_join(US_Praesidenten_4Jplus,first_last, by = "Wahlsieger") %>%
arrange(desc(Periode),Erste)
US_Praesidenten_4Jplus <- left_join(US_Praesidenten_4Jplus,first_last, by = "Wahlsieger") %>%
arrange(desc(Perioden),Erste)
US_Praesidenten_4Jplus <- left_join(US_Praesidenten_4Jplus,first_last, by = "Wahlsieger") %>%
arrange(desc(Perioden)Erste)
US_Praesidenten_4Jplus <- left_join(US_Praesidenten_4Jplus,first_last, by = "Wahlsieger") %>%
arrange(desc(Perioden),Erste)
US_Praesidenten_4Jplus <- left_join(US_Praesidenten_4Jplus,first_last, by = "Wahlsieger") %>%
arrange(desc(Perioden),Erste)
US_Praesidenten_4Jplus <- left_join(US_Praesidenten_4Jplus,first_last, by = "Wahlsieger") %>%
arrange(desc(Perioden),Erste)
left_join(first_last, by = "Wahlsieger") %>%
arrange(desc(Perioden),Erste)
US_Praesidenten_4Jplus <- US_Praesidenten_4Jplus %>%
left_join(first_last, by = "Wahlsieger") %>%
arrange(desc(Perioden),Erste)
US_Praesidenten_4Jplus <- US_Praesidenten_4Jplus %>%
left_join(first_last, by = "Wahlsieger")
US_Praesidenten_4Jplus<- US_Praesidenten_4Jplus %>%
arrange(desc(Perioden),Erste)
US_Praesidenten_4Jplus<- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger) %>%
summarise(Perioden = n()) %>%
ungroup() %>%
filter(Perioden >1) %>%
arrange(desc(Perioden))
first_last <- US_Wahlen_1920_2016 %>%
group_by(Wahlsieger)%>%
summarise(Erste = min(Wahljahr),
Letzte= max(Wahljahr))
US_Praesidenten_4Jplus <- US_Praesidenten_4Jplus %>%
left_join(first_last, by = "Wahlsieger") %>%
arrange(desc(Perioden),Erste)
US_Wahlen_1920_2016 %>%
group_by(Siegerpartei) %>%
summarise(Einkommen_pro_KopfQ1 = median(Einkommen_pro_Kopf, na.rm = TRUE))
US_Wahlen_1920_2016 %>%
group_by(Siegerpartei) %>%
summarise(Einkommen_pro_KopfQ1 = median(Einkommen_pro_Kopf, na.rm = TRUE))
US_Wahlen_1920_2016 %>%
group_by(Siegerpartei) %>%
summarise(Einkommen_pro_KopfQMedian = median(Einkommen_pro_Kopf, na.rm = TRUE),
Einkommen_pro_KopfQ1 = quantile(Einkommen_pro_Kopf,0.25, na.rm = TRUE )
)
US_Wahlen_1920_2016 %>%
group_by(Siegerpartei) %>%
summarise(Einkommen_pro_KopfQMedian = median(Einkommen_pro_Kopf, na.rm = TRUE),
Einkommen_pro_KopfQ1 = quantile(Einkommen_pro_Kopf,0.25, na.rm = TRUE ),
Einkommen_pro_KopfQ3 = quantile(Einkommen_pro_Kopf,0.75, na.rm = TRUE))
US_Wahlen_1920_2016 %>%
group_by(Siegerpartei) %>%
summarise(Einkommen_pro_KopfQMedian = median(Einkommen_pro_Kopf, na.rm = TRUE),
Einkommen_pro_KopfQ1 = quantile(Einkommen_pro_Kopf,0.25, na.rm = TRUE ),
Einkommen_pro_KopfQ3 = quantile(Einkommen_pro_Kopf,0.75, na.rm = TRUE))
library(devtools)
install devtools
install.packages(devtools)
install.packages(devtools)
library(devtools)
install.packages(devtools)
install.package(devtools)
install.packages(devtools)
install_github("seankross/lego")
library(dplyr)
install_github("seankross/lego")
US_Wahlen_1920_2016 %>%
summarise(Fehlend = n(complete.cases(.)))
US_Wahlen_1920_2016 %>%
summarise(Fehlend = n())
US_Wahlen_1920_2016 %>%
summarise(Fehlend = n())
US_Wahlen_1920_2016 %>%
filter(!complete.cases(.))%>%
count()
US_Wahlen_1920_2016 %>%
filter(!complete.cases(.))%>%
count()
sum(!complete.cases(US_Wahlen_1920_2016))
US_Wahlen_1920_2016 %>%
filter(!complete.cases(.))%>%
summarise(Fehlend = n())
US_Wahlen_1920_2016_clean <- US_Wahlen_1920_2016 %>%
filter(!complete.cases(.))
US_Wahlen_1920_2016_clean <- US_Wahlen_1920_2016 %>%
filter(complete.cases(.))
View(US_Wahlen_1920_2016_clean)
US_Wahlen_1920_2016_clean <- US_Wahlen_1920_2016_clean %>%
filter(!duplicated(.))
US_Wahlen_1920_2016_clean <- US_Wahlen_1920_2016_clean %>%
distinct()
View(US_Wahlen_1920_2016)
US_Wahlen_1920_2016 <- US_Wahlen_1920_2016 %>%
mutate(Einkommen_pro_Kopf = ifelse(is.na(Einkommen_pro_Kopf),median(Einkommen_pro_Kopf),Einkommen_pro_Kopf))
US_Wahlen_1920_2016 <- US_Wahlen_1920_2016 %>%
mutate(Einkommen_pro_Kopf = if_else(is.na(Einkommen_pro_Kopf),median(Einkommen_pro_Kopf),Einkommen_pro_Kopf))
US_Wahlen_1920_2016 <- US_Wahlen_1920_2016 %>%
mutate(Einkommen_pro_Kopf = ifelse(is.na(Einkommen_pro_Kopf),median(Einkommen_pro_Kopf, na.rm= TRUE),Einkommen_pro_Kopf))
sum(is.na(US_Wahlen_1920_2016))
library(devtools)
install_github("seankross/lego")
install.packages(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
library(devtools)
install_github("seankross/lego")
library(devtools)
# train recommenderlab UBCF with train_movies data and k=30, cos similarity
ubcf_top_15 <- train_1_ibcf %>%
Recommender(method = "UBCF", parameter = list(k=30, method="cosine"))
library(tidyverse)
library(recommenderlab)
library(ggplot2)
library(ggplot2)
library(tidyverse)
library(tidyverse)
# train recommenderlab IBCF with train_movies data and k=30, cos similarity
ibcf_top_15 <- train_movies %>%
Recommender(method = "IBCF", parameter = list(k=30, method="cosine"))
library(tidyverse)
# get data from recommederlab package
data("MovieLense")
# transform data from Realratingmatrix to Matrix
MovieLenseMatrix <- as(MovieLense, "matrix")
head(sort(colCounts(MovieLense), decreasing = TRUE), 10) ## top 10 Filme mit den meisten Ratings
watched_movies <- colCounts(MovieLense) ## Vektor mit views pro Film
MovieLense_movies <- MovieLenseMeta %>% ## Kopie von MovieLenseMeta nur mit Genres und Title
select(title, Action:Western)
library(magrittr)
library(magrittr)
# get data from recommederlab package
data("MovieLense")
# transform data from Realratingmatrix to Matrix
MovieLenseMatrix <- as(MovieLense, "matrix")
head(sort(colCounts(MovieLense), decreasing = TRUE), 10) ## top 10 Filme mit den meisten Ratings
watched_movies <- colCounts(MovieLense) ## Vektor mit views pro Film
MovieLense_movies <- MovieLenseMeta %>% ## Kopie von MovieLenseMeta nur mit Genres und Title
select(title, Action:Western)
library(magrittr)
library(tidyverse)
install.packages("rlang")
install.packages("rlang")
library(magrittr)
library(tidyverse)
library(magrittr)
library(tidyverse)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(magrittr)
library(tidyverse)
library(devtools)
install_version("rlang", version = "1.0.6", repos = "http://cran.us.r-project.org")
install.packages("devtools")
install.packages("devtools")
install.packages('tidyverse')
install.packages("tidyverse")
library(magrittr)
library(tidyverse)
install_version("rlang", version = "1.0.6", repos = "http://cran.us.r-project.org")
library(tidyverse)
library(magrittr)
library(tidyverse)
install_version("rlang", version = "1.0.6", repos = "http://cran.us.r-project.org")
install.packages("devtools")
install.packages("devtools")
library(magrittr)
library(tidyverse)
install_version("rlang", version = "1.0.6", repos = "http://cran.us.r-project.org")
install_version("rlang", version = "1.0.6", repos = "http://cran.us.r-project.org")
install.packages("tidyverse")
install.packages("tidyverse")
library(magrittr)
library(tidyverse)
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
install_version("rlang", version = "1.0.5", repos = "http://cran.us.r-project.org")
install.packages(usethis)
install_version("rlang", version = "1.0.6", repos = "http://cran.us.r-project.org")
ibrary("usethis")
library("usethis")
library(tidyverse)
library(dplyr)
kleider <- read.csv('kleider.csv')
View(kleider)
View(kleider)
kleider <- read.csv('kleider.csv')
kleider<- kleider[2:4]
View(kleider)
ggplot(kleider,aes(groesse))+
geom_histogram()
library(dplyr)
library(tidyverse)
ggplot(kleider,aes(groesse))+
geom_histogram()
ggplot(kleider,aes(groesse))+
geom_histogram(bins = 30)
ggplot(kleider,aes(groesse))+
geom_histogram()
ggplot(kleider,aes(gewicht))+
geom_histogram()
ggplot(kleider,aes(kleidergroesse))+
geom_histogram()
ggplot(kleider,aes(groesse))+
geom_histogram(bins = 10)
ggplot(kleider,aes(gewicht))+
geom_histogram()
ggplot(kleider,aes(kleidergroesse))+
geom_histogram()
ggplot(kleider,aes(groesse))+
geom_histogram()
ggplot(kleider,aes(gewicht))+
geom_histogram()
ggplot(kleider,aes(kleidergroesse))+
geom_histogram()
kleider.corr()
ggplot(kleider,aes(groesse))+
geom_histogram()
ggplot(kleider,aes(gewicht))+
geom_histogram()
ggplot(kleider,aes(kleidergroesse))+
geom_histogram()
corr_m = kleider.corr()
ggplot(kleider,aes(groesse))+
geom_histogram()
ggplot(kleider,aes(gewicht))+
geom_histogram()
ggplot(kleider,aes(kleidergroesse))+
geom_histogram()
library(corrplot)
cor(kleider)
ggplot(kleider,aes(groesse))+
geom_histogram()
ggplot(kleider,aes(gewicht))+
geom_histogram()
ggplot(kleider,aes(kleidergroesse))+
geom_histogram()
plot(kleider)
model_klvsge = lm(kleidergroesse ~ gewicht, kleider)
model_klvsgr = lm(kleidergroesse ~ groesse, kleider)
View(model_klvsge)
model_klvsge = lm(kleidergroesse ~ gewicht, kleider)
summary(model_klvsge)
model_klvsgr = lm(kleidergroesse ~ groesse, kleider)
summary(model_klvsgr)
model_klvsg = lm(kleidergroesse ~ groesse + gewicht, kleider)
summary(model_klvsg)
fit = read.csv('fitness.csv')
View(fit)
View(fit)
fit = read.csv('fitness.csv')
fit = fit[2:]
fit = read.csv('fitness.csv')
fit = fit[2:,]
fit = read.csv('fitness.csv')
fit = fit[2:8]
ggplot(fit,aes(age))+
geom_histogram()
library(corrplot)
fit_cor = cor(fit, method = c("spearman"))
corrplot(mydata.cor)
library(corrplot)
fit_cor = cor(fit, method = c("spearman"))
corrplot(fit_cor)
library(corrplot)
fit_cor = cor(fit[,-3], method = c("spearman"))
corrplot(fit_cor)
library(corrplot)
fit_cor = cor(fit[,-3], method = c("pearson"))
corrplot(fit_cor)
library(corrplot)
fit_cor = cor(fit[,-3], method = c("spearmen"))
library(corrplot)
fit_cor = cor(fit[,-3], method = c("spearman"))
corrplot(fit_cor)
model_fit = lm(oxy ~ age + weight+runtime+rstpulse+runpulse+maxpulse, fit)
summary(model_fit)
res <- resid(model_fit)
res <- resid(model_fit)
plot(fitted(model_fit), res)
#add a horizontal line at 0
abline(0,0)
car::vif(model_fit)
model_fit = lm(oxy ~ age + weight+runtime+rstpulse+runpulse, fit)
summary(model_fit)
model_fit = lm(oxy ~ age + weight+runtime+rstpulse+runpulse, fit)
summary(model_fit)
car::vif(model_fit)
fit['rm'] <- fit['maxpulse']/fit['runpulse']
fit['maxpulse'] <- fit['maxpulse']/fit['runpulse']
fit = read.csv('fitness.csv')
fit = fit[2:8]
fit['maxpulse'] <- fit['maxpulse']/fit['runpulse']
fit = read.csv('fitness.csv')
fit = fit[2:8]
model_fit = lm(oxy ~ age + weight+runtime+rstpulse+runpulse, fit)
summary(model_fit)
car::vif(model_fit)
fit['maxpulse'] <- fit['runpulse']/fit['maxpulse']
model_fit = lm(oxy ~ age + weight+runtime+rstpulse+runpulse, fit)
summary(model_fit)
car::vif(model_fit)
data = read_csv('df_movie_ratings.csv')
library(dplyr)
library(tidyverse)
data = read_csv('df_movie_ratings.csv')
# Installieren Sie Shiny und laden Sie es
#install.packages("shiny")
library(shiny)
# Erstellen Sie eine Funktion, die einen Bar Plot erstellt
plot_function <- function(data, date) {
ggplot(data, aes(x = date, y = value, fill = variable)) +
geom_bar(stat = "identity")
}
# Definieren Sie die Benutzeroberfläche mit einem Auswahlfeld für das Datum und einem Plot-Bereich
ui <- fluidPage(
selectInput("date", "Datum:", unique(data$date)),
plotOutput("plot")
)
# Definieren Sie die Server-Funktion, die die Daten lädt und den Plot basierend auf den Benutzereingaben erstellt
server <- function(input, output) {
output$plot <- renderPlot({
# Laden Sie die Daten
data <- data
# Filtern Sie die Daten basierend auf dem Benutzereingabe-Datum
filtered_data <- data[data$date == input$date, ]
# Rufen Sie die Plot-Funktion auf und übergeben Sie das gefilterte Datum als Argument
plot_function(filtered_data, input$date)
})
}
# Erstellen Sie die Shiny-App und starten Sie sie
shinyApp(ui = ui, server = server)
# Installieren Sie Shiny und laden Sie es
#install.packages("shiny")
library(shiny)
# Erstellen Sie eine Funktion, die einen Bar Plot erstellt
plot_function <- function(data, date) {
ggplot(data, aes(x = date, y = value, fill = variable)) +
geom_bar(stat = "identity")
}
# Definieren Sie die Benutzeroberfläche mit einem Auswahlfeld für das Datum und einem Plot-Bereich
ui <- fluidPage(
selectInput("date", "Datum:", unique(data$date)),
plotOutput("plot")
)
# Installieren Sie Shiny und laden Sie es
#install.packages("shiny")
library(shiny)
# Erstellen Sie eine Funktion, die einen Bar Plot erstellt
plot_function <- function(data, date) {
ggplot(data, aes(x = date, y = value, fill = variable)) +
geom_bar(stat = "identity")
}
# Definieren Sie die Benutzeroberfläche mit einem Auswahlfeld für das Datum und einem Plot-Bereich
ui <- fluidPage(
selectInput("date", "Datum:", unique(data$date)),
plotOutput("plot")
)
